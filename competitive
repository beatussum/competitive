#!/bin/bash

# Copyright (C) 2021 Mattéo Rossillol‑‑Laruelle <beatussum@protonmail.com>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <https://www.gnu.org/licenses/>.


declare -A COLOR=(
	[bold]="\e[1m"

	[bgreen]="\e[1;32m"
	[bred]="\e[1;31m"
	[byellow]="\e[1;33m"

	[off]="\e[0m"
)

readonly EXE_DIR="$(dirname "$(realpath "$0")")"
readonly EXE_NAME="$(basename "$0")"

case "${XDG_SESSION_TYPE}" in
	"x11")
		COPY_PROGRAM="xclip -selection clipboard"
		PASTE_PROGRAM="xclip -selection clipboard -o"
		;;

	"wayland")
		COPY_PROGRAM="wl-copy"
		PASTE_PROGRAM="wl-paste"
		;;
esac

set -e

info()
{
	local -r msg="$*"

	printf "${COLOR[bgreen]}*${COLOR[off]} %s\n" "${msg}"
}

info_in_square()
{
	local -r msg="$*"

	echo
	printf "=%.0s" $(seq 0 $((${#msg} + 2))); echo
	info "${msg}"
	printf "=%.0s" $(seq 0 $((${#msg} + 2))); echo
	echo
}

die()
{
	local -r code=$1
	local -r line=$2
	shift 2
	local -r msg="$*"

	printf "${COLOR[bred]}${EXE_NAME}${COLOR[off]}: " >&2
	printf "${COLOR[bold]}fatal error at line${COLOR[off]} " >&2
	printf "${COLOR[byellow]}%u${COLOR[off]}" "${line}" >&2

	if [[ -n "${msg}" ]]; then
		printf ": %s\n" "${msg}" >&2
	else
		echo >&2
	fi

	exit ${code}
}

bad_option()
{
	local -r line=$1
	local -r option="$2"

	die 2 ${line} "'${option}' is not a valid option!"
}

usage_new_menu()
{
	local -r menu="$1"

	printf "${COLOR[bgreen]}%s:${COLOR[off]}\n" \
		"${menu}"
}

usage_new_subcommand()
{
	local -r subcommand="$1"
	local -r desc="$2"

	printf "  ${COLOR[byellow]}%-10s${COLOR[off]} ${COLOR[bred]}:${COLOR[off]} %s\n" \
		"${subcommand}" "${desc}"
}

parse_option_arguments()
{
   for i; do
	   if [[ "${i[1]}" = "o" ]]; then
		   printf "[%s]" "${i#o}"
	   elif [[ -n "${i}" ]]; then
		   printf "<%s>" "${i}"
	   fi

	   printf " "
   done; unset i
}

usage_new_option()
{
	local -r option="$1"
	local -r long_option="$2"
	local -r desc="$3"
	local -r arguments="$4"

	printf "  %-55b ${COLOR[bred]}:${COLOR[off]} %s\n" \
		"${COLOR[bold]}${option}, ${long_option}${COLOR[off]} ${COLOR[bgreen]}$(parse_option_arguments "${arguments}")${COLOR[off]}" \
		"${desc}"
}

usage()
{
	header()
	{
		printf "${COLOR[bgreen]}usage:${COLOR[off]} "
		printf "${COLOR[byellow]}${EXE_NAME}${COLOR[off]} "
		printf "${COLOR[bold]}[options]${COLOR[off]}\n"

		printf "       ${COLOR[byellow]}${EXE_NAME}${COLOR[off]} "
		printf "${COLOR[bold]}[options]${COLOR[off]} "
		printf "${COLOR[bold]}<subcommand>${COLOR[off]} "
		printf "${COLOR[bold]}[subcommand options]${COLOR[off]}\n"
	}

	header
	echo
	usage_new_menu "Subcommands"
	usage_new_subcommand "clean" "Cleans a problem"
	usage_new_subcommand "commit" "Commits a problem"
	usage_new_subcommand "copy" "Copies a problem into the clipboard"
	usage_new_subcommand "evalenv" "Prints the instructions needed to load a suitable environment"
	usage_new_subcommand "init" "Creates a new problem"
	usage_new_subcommand "run" "Runs a problem"
	echo
	usage_new_menu "Options"
	usage_new_option "-h" "--help" "Prints this message"
	usage_new_option "-p" "--problem" "Changes the problem name" "name"
}

usage_subcommand_header()
{
	local -r header="$1"; shift
	local -r args=("$@")

	printf "${COLOR[bgreen]}usage:${COLOR[off]} "
	printf "${COLOR[byellow]}${EXE_NAME}${COLOR[off]} "
	printf "${COLOR[bold]}[options]${COLOR[off]} "
	printf "${COLOR[byellow]}${header}${COLOR[off]} "
	printf "${COLOR[bold]}[subcommand options]${COLOR[off]}\n\n"

	usage_new_menu "Subcommand options"
	usage_new_option "-h" "--help" "Prints this message"
}

clean()
{
	usage()
	{
		usage_subcommand_header "clean"
		usage_new_option "-a" "--all" "Cleans all problems inside the project directory"
	}

	local all=false

	while [[ $# -gt 0 ]]; do
		case "$1" in
			-h|--help)
				usage
				exit 0
			;;
			-a|--all)
				all=true
			;;
			*)
				bad_option ${LINENO} "$1"
			;;
		esac

		shift
	done

	local -r build_dir="${WORKING_DIR}/${PROBLEM_NAME}/build"

	if [[ ${all} = true ]]; then
		for p in $(find "${WORKING_DIR}" -mindepth 1 -maxdepth 1 -type d ! -path "*/\.*" ! -name "templates"); do
			PROBLEM_NAME="$(basename "${p}")" clean
		done; unset p
	elif [[ -d "${build_dir}" ]]; then
		info "Cleaning ${PROBLEM_NAME}…"
		rm -fr "${build_dir}"
	else
		info "${PROBLEM_NAME} is already cleaned!"
	fi
}

commit()
{
	info "Adding '${PROBLEM_NAME}' to Git…"

	git add "${WORKING_DIR}/${PROBLEM_NAME}"
	git commit -m "add ${PROBLEM_NAME}" -s

	info "Committed!"
}

copy()
{
	usage()
	{
		usage_subcommand_header "copy"
		usage_new_option "-u" "--uri" "Copies the real file not its content"
	}

	local uri=false

	while [[ $# -gt 0 ]]; do
		case "$1" in
			-h|--help)
				usage
				exit 0
			;;
			-u|--uri)
				uri=true
			;;
			*)
				bad_option ${LINENO} "$1"
			;;
		esac

		shift
	done

	local -r file="${WORKING_DIR}/${PROBLEM_NAME}/problem.cpp"

	info "Copying '${file}' into the clipboard…"

	if [[ ${uri} = true ]]; then
		${COPY_PROGRAM} -t text/uri-list <<< "file://${file}"
	else
		${COPY_PROGRAM} < "${file}"
	fi
}

evalenv()
{
	local -Ar env=(
		[PATH]="${EXE_DIR}"
	)

	for k in "${!env[@]}"; do
		echo "export ${k}=\"\${${k}}:${env[${k}]}\""
	done; unset k
}

init()
{
	usage()
	{
		usage_subcommand_header "init"
		usage_new_option "-u" "--url" "Sets the problem url" "url"
	}

	local platform="codeforces" problem_url

	while [[ $# -gt 0 ]]; do
		case "$1" in
			-h|--help)
				usage
				exit 0
			;;
			-p|--platform)
				shift
				platform="$1"
			;;
			-u|--url)
				shift
				problem_url="$1"
			;;
			*)
				bad_option ${LINENO} "$1"
			;;
		esac

		shift
	done

	info "Initializing ${PROBLEM_NAME}…"

	local -r dir="${WORKING_DIR}/${PROBLEM_NAME}"

	case "${platform}" in
		codeforces)
			local suffix="$(sed -En "s|([0-9]+)([A-Z])|\1/\2|p" <<< "${PROBLEM_NAME}")"
			problem_url="https://codeforces.com/problemset/problem/${suffix}/"

			unset suffix
		;;
		custom)
		;;
		*)
			die "'$1' is an unknown platform"
		;;
	esac

	install -dm755 "${PROBLEM_NAME}/"

	install -m644 "${WORKING_DIR}/templates"/{problem.cpp,CMakeLists.txt} \
		"${dir}"

	sed -i \
		-e "s/@PROBLEM@/${PROBLEM_NAME}/g" \
		-e "s|@URL@|${problem_url}|g" \
		"${dir}"/*
}

run()
{
	usage()
	{
		usage_subcommand_header "run"
		usage_new_option "-c" "--from-clipboard" "Reads input from the clipboard"
		usage_new_option "-r" "--rebuild" "Cleans before rebuilding"
	}

	local clipboard=false rebuild=false

	while [[ $# -gt 0 ]]; do
		case "$1" in
			-h|--help)
				usage
				exit 0
			;;
			-c|--from-clipboard)
				clipboard=true
			;;
			-r|--rebuild)
				rebuild=true
			;;
			*)
				bad_option ${LINENO} "$1"
			;;
		esac

		shift
	done

	[[ ${rebuild} = true ]] && clean

	local -r source_dir="${WORKING_DIR}/${PROBLEM_NAME}"
	local -r build_dir="${WORKING_DIR}/${PROBLEM_NAME}/build"

	cmake -B "${build_dir}" -G Ninja -S "${source_dir}"
	ninja -C "${build_dir}" -j $((nproc + 1))

	if [[ "${clipboard}" = true ]]; then
		info_in_square "Starting ${PROBLEM_NAME} (reading input from the clipboard)…"
		${PASTE_PROGRAM} | exec "${build_dir}/problem"
	else
		info_in_square "Starting ${PROBLEM_NAME}…"
		exec "${build_dir}/problem"
	fi
}

main()
{
	trap 'die $? ${LINENO}' ERR

	PROBLEM_NAME="$(basename "${PWD}")"
	WITH_COLOR="auto"
	WORKING_DIR="${EXE_DIR}"

	while [[ $# -gt 0 ]]; do
		case "$1" in
			-h|--help)
				usage
				exit 0
			;;
			-c|--color)
				shift
				WITH_COLOR="$1"
			;;
			-p|--problem)
				shift
				PROBLEM_NAME="$1"
			;;
			-w|--working-dir)
				shift
				WORKING_DIR="$1"
			;;
			-*)
				bad_option ${LINENO} "$1"
			;;
			*)
				break
			;;
		esac

		shift
	done

	case "${WITH_COLOR}" in
		always)
		;;
		auto)
			[[ -t 1 ]] || unset COLOR
		;;
		none)
			unset COLOR
		;;
		*)
			bad_option ${LINENO} "$1"
		;;
	esac

	[[ -z "${PROBLEM_NAME}" ]] \
		&& die 2 ${LINENO} "The problem name cannot be empty"

	[[ -z "${WORKING_DIR}" ]] \
		&& die 2 ${LINENO} "The working directory cannot be empty"

	if [[ $# -eq 0 ]]; then
		usage
		exit 0
	fi

	local -r subcommands=(clean commit copy evalenv init run)

	subcommand="$1"
	shift

	if [[ "${subcommands[*]}" = *"${subcommand}"* ]]; then
		eval "${subcommand} $@"
		exit 0
	else
		die 2 ${LINENO} "'${subcommand}' is not a valid subcommand"
	fi
}

main "$@"
